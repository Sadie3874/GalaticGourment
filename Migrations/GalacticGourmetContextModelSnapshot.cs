// <auto-generated />
using Assignment1_v2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment1_v2.Migrations
{
    [DbContext(typeof(GalacticGourmetContext))]
    partial class GalacticGourmetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Assignment1_v2.Models.Chef", b =>
                {
                    b.Property<int>("StarChefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExperienceLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StarChefId");

                    b.ToTable("Chefs");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Dish", b =>
                {
                    b.Property<int>("DishID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChefStarChefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanetID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpiceLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DishID");

                    b.HasIndex("ChefStarChefId");

                    b.HasIndex("PlanetID");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DishID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAllergenic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Galaxy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("StartChefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanetId");

                    b.HasIndex("StartChefId")
                        .IsUnique();

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("DishIngredient", b =>
                {
                    b.Property<int>("DishesDishID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientsIngredientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DishesDishID", "IngredientsIngredientId");

                    b.HasIndex("IngredientsIngredientId");

                    b.ToTable("DishIngredient");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Dish", b =>
                {
                    b.HasOne("Assignment1_v2.Models.Chef", "Chef")
                        .WithMany("Dishes")
                        .HasForeignKey("ChefStarChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment1_v2.Models.Planet", "Planet")
                        .WithMany("Dishes")
                        .HasForeignKey("PlanetID");

                    b.Navigation("Chef");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Planet", b =>
                {
                    b.HasOne("Assignment1_v2.Models.Chef", "Chef")
                        .WithOne("Planet")
                        .HasForeignKey("Assignment1_v2.Models.Planet", "StartChefId");

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("DishIngredient", b =>
                {
                    b.HasOne("Assignment1_v2.Models.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesDishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment1_v2.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment1_v2.Models.Chef", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("Assignment1_v2.Models.Planet", b =>
                {
                    b.Navigation("Dishes");
                });
#pragma warning restore 612, 618
        }
    }
}
